package metric.correlation.analysis.vulnerabilities;

import static metric.correlation.analysis.calculation.impl.CVEMetrics.MetricKeysImpl.AVERAGE_CVSS2;
import static metric.correlation.analysis.calculation.impl.CVEMetrics.MetricKeysImpl.AVERAGE_CVSS3;
import static metric.correlation.analysis.calculation.impl.CVEMetrics.MetricKeysImpl.MAX_CVSS2;
import static metric.correlation.analysis.calculation.impl.CVEMetrics.MetricKeysImpl.MAX_CVSS3;
import static metric.correlation.analysis.calculation.impl.CVEMetrics.MetricKeysImpl.NUMBER_OF_VULNERABILITIES;
import static org.elasticsearch.index.query.QueryBuilders.termQuery;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import org.apache.http.HttpHost;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.elasticsearch.action.search.SearchRequest;
import org.elasticsearch.action.search.SearchResponse;
import org.elasticsearch.client.RestClient;
import org.elasticsearch.client.RestHighLevelClient;
import org.elasticsearch.common.unit.Fuzziness;
import org.elasticsearch.index.query.BoolQueryBuilder;
import org.elasticsearch.index.query.FuzzyQueryBuilder;
import org.elasticsearch.index.query.QueryBuilders;
import org.elasticsearch.search.SearchHit;
import org.elasticsearch.search.builder.SearchSourceBuilder;
import org.junit.Test;

import info.debatty.java.stringsimilarity.Levenshtein;

/**
 * Defines the vulnerability database queries.
 *
 * @author Antoniya Ivanova
 * @author Sven Peldszus
 */

public class VulnerabilityDataQueryHandler {

	private static final String INDEX_NAME = VulnerabilityDataImporter.vulnerabilityDatabaseName;
	private static final String INDEX_TYPE = "doc";

	private static final Logger LOGGER = Logger.getLogger(VulnerabilityDataQueryHandler.class);

	/**
	 * Get the vulnerabilities for a given (product, vendor, version, fuzziness)
	 * quadruple.
	 *
	 * @param product   - product name
	 * @param vendor    - the vendor of the product
	 * @param version   - version name as String or * for all versions
	 * @param fuzziness - the fuzziness level of the search
	 *                  ("ZERO","ONE","TWO","AUTO");
	 * @return An ArrayList of the resulting search hits from the database.
	 */
	public Set<SearchHit> getVulnerabilities(String product, String vendor, final String version, final String fuzziness) {
		final Levenshtein l = new Levenshtein();
		final RestHighLevelClient elasticClient = new RestHighLevelClient(
				RestClient.builder(new HttpHost("localhost", 9200, "http")));

		// Normalize the input
		product = product.toLowerCase().replace("-", "").replace("_", "");
		vendor = vendor.toLowerCase().replace("-", "").replace("_", "");

		// Search for vulnerabilities by product name first
		final ArrayList<SearchHit> resultsByProductName = new ArrayList<>();

		final BoolQueryBuilder productQuery = buildQuery("Product", product, version, fuzziness);
		final SearchHit[] productHits = search(elasticClient, productQuery);
		if (productHits.length == 0) {
			LOGGER.log(Level.INFO, "No vulnerabilities found for product " + product + ".");
		} else {
			for (final SearchHit hit : productHits) {
				final Map<String, Object> searchHitMap = hit.getSourceAsMap();
				if ((l.distance(vendor, (String) searchHitMap.get("Vendor")) <= (vendor.length() / 2))) {
					resultsByProductName.add(hit);
				}
			}
		}

		// Search for remaining vulnerabilities by vendor name
		final ArrayList<SearchHit> resultsByVendorName = new ArrayList<>();

		final BoolQueryBuilder vendorQuery = buildQuery("Vendor", vendor, version, fuzziness);
		final SearchHit[] vendorHits = search(elasticClient, vendorQuery);
		if (vendorHits.length == 0) {
			LOGGER.log(Level.INFO, "No vulnerabilities found for vendor " + vendor + ".");
		} else {
			for (final SearchHit hit : vendorHits) {
				final Map<String, Object> searchHitMap = hit.getSourceAsMap();
				if ((l.distance(product, (String) searchHitMap.get("Product")) <= (product.length() / 2))) {
					resultsByVendorName.add(hit);
				}
			}
		}

		final HashSet<SearchHit> results = new HashSet<>();
		results.addAll(resultsByVendorName);
		results.addAll(resultsByProductName);

		if (!results.isEmpty()) {
			LOGGER.log(Level.INFO, "Found vulnerabilities for " + product);
			for (final SearchHit searchHit : results) {
				final Map<String, Object> searchHitMap = searchHit.getSourceAsMap();
				LOGGER.log(Level.INFO, searchHitMap.get("ID"));
			}
		}
		try {
			elasticClient.close();
		} catch (final Exception e) {
			LOGGER.log(Level.ERROR, "Could not close elastic client.");
			LOGGER.log(Level.ERROR, e.getMessage(), e);
		}

		return results;
	}

	private BoolQueryBuilder buildQuery(final String key, final String value, final String version, final String fuzziness) {
		BoolQueryBuilder productQuery = QueryBuilders.boolQuery().must(buildFuzzyQuery(key, value, fuzziness));
		// Add search for version, if given
		if (version.isEmpty()) {
			LOGGER.log(Level.INFO,
					"Searching for vulnerabilities of " + key + ": " + value + ", version " + version + ".");
			productQuery = productQuery.must(termQuery("Versions", version));
		} else {
			LOGGER.log(Level.INFO,
					"Searching for vulnerabilities of " + key + ": " + value + " without version information.");
		}
		return productQuery;
	}

	private SearchHit[] search(final RestHighLevelClient elasticClient, final BoolQueryBuilder productQuery) {
		final SearchRequest searchRequest = new SearchRequest(INDEX_NAME).types(INDEX_TYPE);
		final SearchSourceBuilder source = searchRequest.source();
		source.size(5000);
		source.query(productQuery);


		SearchHit[] searchHits;
		try {
			final SearchResponse searchResponse = elasticClient.search(searchRequest);
			searchHits = searchResponse.getHits().getHits();
		} catch (final IOException e) {
			LOGGER.log(Level.ERROR, "Could not get a search response by product name.");
			LOGGER.log(Level.ERROR, e.getMessage(), e);
			searchHits = new SearchHit[0];
		}
		return searchHits;
	}

	private FuzzyQueryBuilder buildFuzzyQuery(final String type, final String typeName, final String fuzziness) {
		FuzzyQueryBuilder queryBuilder = null;

		switch (fuzziness) {
		case "ZERO":
			queryBuilder = QueryBuilders.fuzzyQuery(type, typeName).maxExpansions(4).prefixLength(5)
			.fuzziness(Fuzziness.ZERO).transpositions(true);
			break;
		case "ONE":
			queryBuilder = QueryBuilders.fuzzyQuery(type, typeName).maxExpansions(4).prefixLength(5)
			.fuzziness(Fuzziness.ONE).transpositions(true);
			break;
		case "TWO":
			queryBuilder = QueryBuilders.fuzzyQuery(type, typeName).maxExpansions(4).prefixLength(5)
			.fuzziness(Fuzziness.TWO).transpositions(true);
			break;
		case "AUTO":
			queryBuilder = QueryBuilders.fuzzyQuery(type, typeName).maxExpansions(4).prefixLength(5)
			.fuzziness(Fuzziness.AUTO).transpositions(true);
			break;
		}

		return queryBuilder;
	}

	/**
	 * @param Documents - A set of documents with the same version project and
	 *                  vendor name
	 * @return A HashMap containing the Metrics for a given set of searchHits
	 */
	public Map<String, String> getMetrics(final Set<SearchHit> documents) {
		final double numberOfVulnerabilities = documents.size();
		double averageCVSS2 = 0;
		double averageCVSS3 = 0;
		double maxCVSS2 = 0;
		double maxCVSS3 = 0;

		if (numberOfVulnerabilities > 0) {
			for (final SearchHit searchHit : documents) {
				final Map<String, Object> searchHitMap = searchHit.getSourceAsMap();
				final double CVSS2 = (double) searchHitMap.get("CVSS2_baseScore");
				final double CVSS3 = (double) searchHitMap.get("CVSS3_baseScore");

				maxCVSS2 = Math.max(CVSS2, maxCVSS2);
				maxCVSS3 = Math.max(CVSS3, maxCVSS3);

				averageCVSS2 += CVSS2;
				averageCVSS3 += CVSS3;
			}

			averageCVSS2 = averageCVSS2 / numberOfVulnerabilities;
			averageCVSS3 = averageCVSS3 / numberOfVulnerabilities;

			if (maxCVSS3 == 0) {
				averageCVSS3 = -1;
				maxCVSS3 = -1;
			}

			if (maxCVSS2 == 0) {
				averageCVSS2 = -1;
				maxCVSS2 = -1;
			}
		}

		final HashMap<String, String> result = new HashMap<>();
		result.put(NUMBER_OF_VULNERABILITIES.toString(), Double.toString(numberOfVulnerabilities));
		result.put(AVERAGE_CVSS2.toString(), Double.toString(averageCVSS2));
		result.put(AVERAGE_CVSS3.toString(), Double.toString(averageCVSS3));
		result.put(MAX_CVSS2.toString(), Double.toString(maxCVSS2));
		result.put(MAX_CVSS3.toString(), Double.toString(maxCVSS3));
		return result;
	}

	@Test
	public void testVulnerabilitySearch() {
		Logger.getRootLogger().setLevel(Level.ALL);
		final Set<SearchHit> test = getVulnerabilities("FileDownloader", "lingochamp", "", "AUTO");
		LOGGER.info("All: " + test.size());
		for (final SearchHit hit : test) {
			LOGGER.info(hit.getSourceAsMap().get("ID"));
		}
	}
}
